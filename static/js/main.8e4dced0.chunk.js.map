{"version":3,"sources":["360.jpg","App.js","reportWebVitals.js","index.js"],"names":["config","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","intensity","decay","decayRate","controls","undefined","Box","props","mesh","useRef","useFrame","current","rotation","z","base","THREE","load","threesixty","ref","position","args","attach","map","App","camera","OrbitControls","makeDefault","Stars","radius","depth","count","factor","saturation","fade","CameraShake","Billboard","follow","lockX","lockY","color","outlineWidth","outlineColor","textAlign","lineHeight","lockZ","Text","fontSize","letterSpacing","font","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,gC,wDCSnCA,EAAS,CACbC,OAAQ,GACRC,SAAU,GACVC,QAAS,GACTC,aAAc,GACdC,eAAgB,GAChBC,cAAe,GACfC,UAAW,GACXC,OAAO,EACPC,UAAW,IACXC,cAAUC,GAGZ,SAASC,EAAIC,GACX,IAAMC,EAAOC,mBACbC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,GAAK,OAC3C,IAAMC,GAAO,IAAIC,iBAAsBC,KAAKC,GAE5C,OACE,iDAAUV,GAAV,IAAiBW,IAAKV,EAAMW,SAAU,CAAC,EAAG,EAAG,GAA7C,UACE,gCAAgBC,KAAM,CAAC,EAAG,OAC1B,mCAAmBC,OAAO,WAAWC,IAAKR,QAKjC,SAASS,IAAO,IAAD,EAC5B,OACE,eAAC,IAAD,CAAQC,OAAQ,CAAEL,SAAU,CAAC,EAAG,EAAG,KAAnC,UACE,cAACM,EAAA,EAAD,CAAeC,aAAW,IAC1B,4BAAYP,SAAU,CAAC,GAAI,GAAI,MAC/B,cAACb,EAAD,IACA,cAACqB,EAAA,EAAD,CACEC,OAAQ,IACRC,MAAO,GACPC,MAAO,IACPC,OAAQ,EACRC,WAAY,EACZC,MAAI,IAEN,cAACC,EAAA,EAAD,eAAiBxC,IACjB,eAACyC,EAAA,EAAD,CACEC,QAAQ,EACRC,OAAO,EACPC,OAAO,EACPC,MAAO,UACPpB,SAAU,CAAC,EAAG,GAAI,GAClBqB,aAAc,EACdC,aAAa,UACbC,UAAW,SACXC,WAAY,EACZC,OAAO,EAVT,UAYE,cAACC,EAAA,EAAD,CACEC,SAAU,EACVP,MAAO,UACPC,aAAc,GACdC,aAAa,QACbC,UAAW,SACXC,WAAY,EACZI,cAAe,IACfC,KAAK,6FARP,6BAYA,cAACH,EAAA,GAAD,GACE1B,SAAU,CAAC,GAAI,EAAG,GAClB4B,cAAe,IACfP,aAAc,GACdC,aAAa,QACbC,UAAW,SACXC,WAAY,GANd,2BAOc,GAPd,sBAQS,WART,yBASY,GATZ,qBAUO,8FAVP,yCC1ER,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrC,EAAD,MAEFsC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8e4dced0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/360.d1192106.jpg\";","import React, { useRef, Suspense, useEffect, useState } from \"react\";\nimport { Canvas, useFrame, useLoader } from \"@react-three/fiber\";\n\nimport * as THREE from \"three\";\nimport threesixty from \"./360.jpg\";\nimport { Stars, Text, Billboard, OrbitControls } from \"@react-three/drei\";\nimport { CameraShake } from \"@react-three/drei\";\nimport \"./style.css\";\n\nconst config = {\n  maxYaw: 0.1, // Max amount camera can yaw in either direction\n  maxPitch: 0.1, // Max amount camera can pitch in either direction\n  maxRoll: 0.1, // Max amount camera can roll in either direction\n  yawFrequency: 0.1, // Frequency of the the yaw rotation\n  pitchFrequency: 0.1, // Frequency of the pitch rotation\n  rollFrequency: 0.1, // Frequency of the roll rotation\n  intensity: 0.8, // initial intensity of the shake\n  decay: false, // should the intensity decay over time\n  decayRate: 0.65, // if decay = true this is the rate at which intensity will reduce at\n  controls: undefined, // if using orbit controls, pass a ref here so we can update the rotation\n};\n\nfunction Box(props) {\n  const mesh = useRef();\n  useFrame(() => (mesh.current.rotation.z -= 0.05));\n  const base = new THREE.TextureLoader().load(threesixty);\n\n  return (\n    <mesh {...props} ref={mesh} position={[0, 0, 0]}>\n      <circleGeometry args={[8, 100]} />\n      <meshPhongMaterial attach=\"material\" map={base} />\n    </mesh>\n  );\n}\n\nexport default function App() {\n  return (\n    <Canvas camera={{ position: [0, 0, 35] }}>\n      <OrbitControls makeDefault />\n      <pointLight position={[40, 40, 40]} />\n      <Box />\n      <Stars\n        radius={100}\n        depth={30}\n        count={5000}\n        factor={5}\n        saturation={0}\n        fade\n      />\n      <CameraShake {...config} />\n      <Billboard\n        follow={true}\n        lockX={true}\n        lockY={true}\n        color={\"#FABF9D\"}\n        position={[0, 15, 0]}\n        outlineWidth={2}\n        outlineColor=\"#ffffff\"\n        textAlign={\"center\"}\n        lineHeight={1}\n        lockZ={true} // Lock the rotation on the z axis (default=false)\n      >\n        <Text\n          fontSize={2}\n          color={\"#FABF9D\"}\n          outlineWidth={0.5}\n          outlineColor=\"black\"\n          textAlign={\"center\"}\n          lineHeight={1}\n          letterSpacing={0.02}\n          font=\"https://fonts.gstatic.com/s/opensans/v15/K88pR3goAWT7BTt32Z01m4X0hVgzZQUfRDuZrPvH3D8.woff2\"\n        >\n          HEADSGONE - 360\n        </Text>\n        <Text\n          position={[0, -3, 0]}\n          letterSpacing={0.02}\n          outlineWidth={0.5}\n          outlineColor=\"black\"\n          textAlign={\"center\"}\n          lineHeight={1}\n          lineHeight={1}\n          color={\"#FABF9D\"}\n          fontSize={2}\n          font=\"https://fonts.gstatic.com/s/opensans/v15/K88pR3goAWT7BTt32Z01m4X0hVgzZQUfRDuZrPvH3D8.woff2\"\n        >\n          EP\n        </Text>\n      </Billboard>\n    </Canvas>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}